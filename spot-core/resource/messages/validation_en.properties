
javax.validation.constraints.AssertFalse.message = must be false
javax.validation.constraints.AssertTrue.message  = must be true
javax.validation.constraints.DecimalMax.message  = must be less than or equal to {value}
javax.validation.constraints.DecimalMin.message  = must be greater than or equal to {value}
javax.validation.constraints.Digits.message      = numeric value out of bounds (<{integer} digits>.<{fraction} digits> expected)
javax.validation.constraints.Email.message       = not a valid email address
javax.validation.constraints.Future.message      = must be in the future
javax.validation.constraints.Max.message         = must be less than or equal to {value}
javax.validation.constraints.Min.message         = must be greater than or equal to {value}
javax.validation.constraints.Negative.message    = must be less ${inclusive == true ? 'or equal ' : ''}0
javax.validation.constraints.NotBlank.message    = must not be empty
javax.validation.constraints.NotEmpty.message    = must not be empty
javax.validation.constraints.NotNull.message     = may not be null
javax.validation.constraints.Null.message        = must be null
javax.validation.constraints.Past.message        = must be in the past
javax.validation.constraints.Pattern.message     = must match "{regexp}"
javax.validation.constraints.Positive.message    = must be greater ${strict == false ? 'or equal ' : ''}0
javax.validation.constraints.Size.message        = size must be between {min} and {max}

org.hibernate.validator.constraints.CreditCardNumber.message       = invalid credti card number
org.hibernate.validator.constraints.Currency.message               = invalid currency (permitted values: {value})
org.hibernate.validator.constraints.EAN.message                    = invalid {type} barcode
org.hibernate.validator.constraints.Email.message                  = "{value}" is not a valid email address
org.hibernate.validator.constraints.Length.message                 = length must be between {min} and {max}
org.hibernate.validator.constraints.NotBlank.message               = may not be empty
org.hibernate.validator.constraints.NotEmpty.message               = may not be empty
org.hibernate.validator.constraints.ParametersScriptAssert.message = Script expression "{script}" didn't return true
org.hibernate.validator.constraints.Range.message                  = {value} must be between {min} and {max}
org.hibernate.validator.constraints.SafeHtml.message               = may contain insecure HTML content
org.hibernate.validator.constraints.ScriptAssert.message           = Script expressoin "{script}" didn't return true
org.hibernate.validator.constraints.URL.message                    = must be a valid URL
org.hibernate.validator.constraints.time.DurationMax.message       = may be shorter${inclusive == true ? ' or equal ' : ' als'}${days == 0 ? '' : days == 1 ? ' 1 day' : ' ' += days += ' days'}${hours == 0 ? '' : hours == 1 ? ' 1 hour' : ' ' += hours += ' hours'}${minutes == 0 ? '' : minutes == 1 ? ' 1 minute' : ' ' += minutes += ' minutes'}${seconds == 0 ? '' : seconds == 1 ? ' 1 second' : ' ' += seconds += ' seconds'}${millis == 0 ? '' : millis == 1 ? ' 1 millisecond' : ' ' += millis += ' milliseconds'}${nanos == 0 ? '' : nanos == 1 ? ' 1 nanosecond' : ' ' += nanos += ' nanoseconds'}
org.hibernate.validator.constraints.time.DurationMin.message       = may be longer${inclusive == true ? ' or equal ' : ' als'}${days == 0 ? '' : days == 1 ? ' 1 day' : ' ' += days += ' days'}${hours == 0 ? '' : hours == 1 ? ' 1 hour' : ' ' += hours += ' hours'}${minutes == 0 ? '' : minutes == 1 ? ' 1 minute' : ' ' += minutes += ' minutes'}${seconds == 0 ? '' : seconds == 1 ? ' 1 second' : ' ' += seconds += ' seconds'}${millis == 0 ? '' : millis == 1 ? ' 1 millisecond' : ' ' += millis += ' milliseconds'}${nanos == 0 ? '' : nanos == 1 ? ' 1 nanosecond' : ' ' += nanos += ' nanoseconds'}
